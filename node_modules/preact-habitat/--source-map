!function(global, factory) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = factory(require("preact")) : "function" == typeof define && define.amd ? define([ "preact" ], factory) : global.PreactHabitat = factory(global.preact);
}(this, function(preact) {
    "use strict";
    preact = "default" in preact ? preact.default : preact;
    var _capetalize = function(str) {
        return str.replace(/-([a-z])/gi, function(all, letter) {
            return letter.toUpperCase();
        });
    }, _getCurrentScriptTag = function() {
        return document.currentScript || function() {
            var scripts = document.getElementsByTagName("script");
            return scripts[scripts.length - 1];
        }();
    }, _propsToPassDown = function(element) {
        var attrs = element.attributes, props = {};
        return Object.keys(attrs).forEach(function(key) {
            if (attrs.hasOwnProperty(key)) {
                var dataAttrName = attrs[key].name;
                if (!dataAttrName || "string" != typeof dataAttrName) return !1;
                var propName = dataAttrName.split(/(data-props?-)/).pop();
                if (propName = _capetalize(propName), dataAttrName !== propName) {
                    var propValue = attrs[key].nodeValue;
                    props[propName] = propValue;
                }
            }
        }), props;
    }, _hostDOMElms = function() {
        var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, _ref$name = _ref.name, name = void 0 === _ref$name ? "data-widget" : _ref$name, _ref$value = _ref.value, value = void 0 === _ref$value ? null : _ref$value, _ref$inline = _ref.inline, inline = void 0 === _ref$inline || _ref$inline, _ref$clean = _ref.clean, clean = void 0 === _ref$clean || _ref$clean, hostNodes = [], currentScript = _getCurrentScriptTag();
        if (!value) {
            var scriptTagAttrs = currentScript.attributes;
            Object.keys(scriptTagAttrs).forEach(function(key) {
                scriptTagAttrs.hasOwnProperty(key) && "data-mount" === scriptTagAttrs[key].name && (value = scriptTagAttrs[key].nodeValue);
            });
        }
        if (!value && inline) {
            var node = currentScript.parentNode;
            return clean && (node.innerHTML = ""), [].concat(node);
        }
        return [].forEach.call(document.querySelectorAll("[" + name + "]"), function(queriedTag) {
            value === queriedTag.getAttribute(name) && (clean && (queriedTag.innerHTML = ""), 
            hostNodes.push(queriedTag));
        }), hostNodes;
    }, _render = function(widget, hostElements, root) {
        hostElements.forEach(function(elm) {
            var hostNode = elm, props = _propsToPassDown(elm) || {};
            return preact.render(preact.h(widget, props), hostNode, root);
        });
    };
    return function(Widget) {
        var widget = Widget, hasRendered = !1;
        return {
            render: function() {
                var _ref = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, _ref$name = _ref.name, name = void 0 === _ref$name ? "data-widget" : _ref$name, _ref$value = _ref.value, value = void 0 === _ref$value ? null : _ref$value, _ref$inline = _ref.inline, inline = void 0 === _ref$inline || _ref$inline, _ref$clean = _ref.clean, clean = void 0 === _ref$clean || _ref$clean, elements = _hostDOMElms({
                    name: name,
                    value: value,
                    inline: inline,
                    clean: clean
                });
                if (!hasRendered && elements.length > 0) return hasRendered = !0, _render(widget, elements, null);
                document.addEventListener("DOMContentLoaded", function(e) {
                    var elements = _hostDOMElms({
                        name: name,
                        value: value,
                        inline: inline,
                        clean: clean
                    });
                    if (!hasRendered && elements.length > 0) return hasRendered = !0, _render(widget, elements, null);
                });
            }
        };
    };
});